#!/usr/bin/env bash
set -euo pipefail

# --- paths (config next to this script) ---
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CONFIG_DIR="$SCRIPT_DIR/config"
DB_FILE="$CONFIG_DIR/servers.tsv"

mkdir -p "$CONFIG_DIR"
touch "$DB_FILE"

has_cmd() { command -v "$1" >/dev/null 2>&1; }

# --- data helpers ---
list_entries() { awk -F'\t' 'NF>=2 {print $1 "\t" $2}' "$DB_FILE"; }
get_aliases()  { list_entries | cut -f1; }
exists_alias() { get_aliases | grep -Fxq "${1:?alias-required}"; }
get_target()   { awk -F'\t' -v a="$1" '$1==a{print $2}' "$DB_FILE"; }

# --- actions ---
add_entry() {
  local alias target
  if has_cmd gum; then
    alias=$(gum input --placeholder "alias (e.g., 7in, prod)") || exit 1
    [[ -z "${alias}" ]] && { echo "Alias required."; exit 1; }
    exists_alias "$alias" && { echo "Alias '$alias' already exists."; exit 1; }
    target=$(gum input --placeholder "ssh args/target (e.g., user@1.2.3.4 or -p 2222 user@host)") || exit 1
    [[ -z "${target}" ]] && { echo "Target required."; exit 1; }
  else
    read -rp "Alias (e.g., 7in, prod): " alias
    [[ -z "${alias:-}" ]] && { echo "Alias required."; exit 1; }
    exists_alias "$alias" && { echo "Alias '$alias' already exists."; exit 1; }
    echo "SSH target/args (e.g., user@1.2.3.4 OR -p 2222 user@host):"
    read -r target
    [[ -z "${target:-}" ]] && { echo "Target required."; exit 1; }
  fi

  printf "%s\t%s\n" "$alias" "$target" >>"$DB_FILE"

  # dedupe by alias (keep last) and sort by alias (portable on macOS)
  awk -F'\t' 'NF>=2{a[$1]=$0} END{for (k in a) print a[k]}' "$DB_FILE" \
    | LC_ALL=C sort -t$'\t' -k1,1 > "$DB_FILE.tmp" \
    && mv "$DB_FILE.tmp" "$DB_FILE"

  echo "Added: $alias → $target"
}

delete_entry() {
  local alias
  # portable read into array (no mapfile)
  aliases=()
  while IFS= read -r line; do [[ -n "$line" ]] && aliases+=("$line"); done < <(get_aliases)
  [[ ${#aliases[@]} -eq 0 ]] && { echo "No entries."; return 0; }

  if has_cmd gum; then
    alias=$(printf "%s\n" "${aliases[@]}" | gum choose --header "Choose alias to delete") || exit 1
  else
    echo "Delete which alias?"
    select alias in "${aliases[@]}" "Cancel"; do
      [[ "$REPLY" -eq $(( ${#aliases[@]} + 1 )) || "${alias:-}" == "Cancel" ]] && return 0
      [[ -n "${alias:-}" ]] && break
      echo "Invalid."
    done
  fi

  awk -F'\t' -v a="$alias" '$1 != a' "$DB_FILE" > "$DB_FILE.tmp" && mv "$DB_FILE.tmp" "$DB_FILE"
  # no echo here (silent as requested)
}

login_alias() {
  local alias="$1"
  local target
  target="$(get_target "$alias")"
  [[ -z "$target" ]] && { echo "Alias '$alias' not found."; exit 1; }
  echo "→ ssh $target"
  # allow multi-word targets/args like: -p 32344 user@host
  # shellcheck disable=SC2086
  exec ssh $target
}

list_pretty() {
  awk -F'\t' 'NF>=2 {printf "%-16s %s\n", $1, $2}' "$DB_FILE"
}

usage() {
  cat <<EOF
Usage: $(basename "$0") [alias|command]

With no args, shows a menu (aliases first, then actions):
  1. <alias1>
  2. <alias2>
  3. add
  4. delete
  5. quit

Examples:
  $(basename "$0")         # open menu
  $(basename "$0") 7in     # instant login to alias 7in

Commands:
  add          Add a server
  delete       Delete a server (choose)
  delete <a>   Delete alias <a>
  list         List saved servers
  file         Show path to servers.tsv
  help         Show this help
EOF
}

menu_loop() {
  while true; do
    # portable read into array (no mapfile)
    aliases=()
    while IFS= read -r line; do [[ -n "$line" ]] && aliases+=("$line"); done < <(get_aliases)

    if has_cmd gum; then
      options=("${aliases[@]}")
      options+=("add" "delete" "quit")
      picked=$(printf "%s\n" "${options[@]}" | gum choose --header "Server Manager") || exit 1
      case "$picked" in
        add) add_entry ;;
        delete) delete_entry ;;
        quit) exit 0 ;;
        *) login_alias "$picked" ;;
      esac
    else
      echo "== Server Manager =="
      local i=1
      for a in "${aliases[@]}"; do
        printf "%d) %s\n" "$i" "$a"
        ((i++))
      done
      local ADD=$i;   printf "%d) add\n" "$ADD";   ((i++))
      local DEL=$i;   printf "%d) delete\n" "$DEL"; ((i++))
      local QUIT=$i;  printf "%d) quit\n" "$QUIT"

      printf "\nSelect: "
      read -r choice
      if [[ "$choice" =~ ^[0-9]+$ ]]; then
        if (( choice>=1 && choice<=${#aliases[@]} )); then
          login_alias "${aliases[$((choice-1))]}"
        elif (( choice == ADD )); then
          add_entry
        elif (( choice == DEL )); then
          delete_entry
        elif (( choice == QUIT )); then
          exit 0
        else
          echo "Invalid choice."
        fi
      else
        case "$choice" in
          add) add_entry ;;
          delete) delete_entry ;;
          quit|q|exit) exit 0 ;;
          *) exists_alias "$choice" && login_alias "$choice" || echo "Unknown option '$choice'." ;;
        esac
      fi
      echo
    fi
  done
}

# --- dispatch ---
arg="${1:-}"
case "$arg" in
  "" ) menu_loop ;;
  add) add_entry ;;
  delete)
    if [[ -n "${2:-}" ]]; then
      exists_alias "$2" || { echo "Alias '$2' not found."; exit 1; }
      awk -F'\t' -v a="$2" '$1 != a' "$DB_FILE" > "$DB_FILE.tmp" && mv "$DB_FILE.tmp" "$DB_FILE"
      # silent (no echo)
    else
      delete_entry
    fi
    ;;
  list) list_pretty ;;
  file) echo "$DB_FILE" ;;
  help|-h|--help) usage ;;
  *)
    exists_alias "$arg" && login_alias "$arg" || { echo "Unknown alias or command: '$arg'"; usage; exit 1; }
    ;;
esac